============================= test session starts =============================
platform win32 -- Python 3.7.16, pytest-6.2.5, py-1.11.0, pluggy-1.2.0
rootdir: D:\GitRepos\py4cli
plugins: reporter-0.5.2, reporter-html1-0.8.2
collected 127 items

test_min_call.py .E.E....E.E....E.E....E.E....E.E....E.E....E.E......    [ 29%]
test_min_os.py ......................................                    [ 59%]
test_min_warn.py ...........                                             [ 68%]
test_mod_call.py ......                                                  [ 73%]
test_mod_os.py ...........................                               [ 94%]
test_mod_warn.py .......                                                 [100%]

=================================== ERRORS ====================================
_______________ ERROR at teardown of test_single_int[arg0-None] _______________

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global args_in
        global OBJ
        global returned
    
        yield
    
>       assert(returned == OBJ.returned)
E       assert None == {}
E        +  where {} = <minimal_scripts.basic_usage.single_int object at 0x000002AA622D7AC8>.returned

test_min_call.py:126: AssertionError
---------------------------- Captured stdout call -----------------------------

 | > def parse_args 
 |    
 |  Description :
 |    
 |    example parse_args template function with single argument of type <int>  
 |    
 |  Arguments :
 |    
 |   -inp_int: int = 0
 |    
 |  Usage :
 |    
 |    inp_int is variable of type <int>  
 |    any integer value can be passed for the argument, while the default is 0 
 |    the function returns the same arg value as type <int> 
 |     
 |    cmds : 
 |        1. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py 10 
 |        2. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py -inp_int=10  
 |    
 | -> int (Returnable)

['basic_usage.py', '-h'] : Expected(None) != Actual({})

_______________ ERROR at teardown of test_single_int[arg1-None] _______________

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global args_in
        global OBJ
        global returned
    
        yield
    
>       assert(returned == OBJ.returned)
E       assert None == {}
E        +  where {} = <minimal_scripts.basic_usage.single_int object at 0x000002AA622E7B48>.returned

test_min_call.py:126: AssertionError
---------------------------- Captured stdout call -----------------------------

 | > def parse_args 
 |    
 |  Description :
 |    
 |    example parse_args template function with single argument of type <int>  
 |    
 |  Arguments :
 |    
 |   -inp_int: int = 0
 |    
 |  Usage :
 |    
 |    inp_int is variable of type <int>  
 |    any integer value can be passed for the argument, while the default is 0 
 |    the function returns the same arg value as type <int> 
 |     
 |    cmds : 
 |        1. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py 10 
 |        2. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py -inp_int=10  
 |    
 | -> int (Returnable)

['basic_usage.py', '--help'] : Expected(None) != Actual({})

______________ ERROR at teardown of test_single_float[arg0-None] ______________

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global args_in
        global OBJ
        global returned
    
        yield
    
>       assert(returned == OBJ.returned)
E       assert None == {}
E        +  where {} = <minimal_scripts.basic_usage.single_float object at 0x000002AA62323F48>.returned

test_min_call.py:126: AssertionError
---------------------------- Captured stdout call -----------------------------

 | > def parse_args 
 |    
 |  Description :
 |    
 |    example parse_args template function with single argument of type <float>  
 |    
 |  Arguments :
 |    
 |   -inp_float: float = 0.0
 |    
 |  Usage :
 |    
 |    inp_float is variable of type <float>  
 |    any floating point value can be passed for the argument, while the default is 0.0 
 |    the function returns the same arg value as type <float> 
 |     
 |    cmds : 
 |        1. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py 10.0 
 |        2. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py -inp_float=10.0  
 |    
 | -> float (Returnable)

['basic_usage.py', '-h'] : Expected(None) != Actual({})

______________ ERROR at teardown of test_single_float[arg1-None] ______________

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global args_in
        global OBJ
        global returned
    
        yield
    
>       assert(returned == OBJ.returned)
E       assert None == {}
E        +  where {} = <minimal_scripts.basic_usage.single_float object at 0x000002AA623AD488>.returned

test_min_call.py:126: AssertionError
---------------------------- Captured stdout call -----------------------------

 | > def parse_args 
 |    
 |  Description :
 |    
 |    example parse_args template function with single argument of type <float>  
 |    
 |  Arguments :
 |    
 |   -inp_float: float = 0.0
 |    
 |  Usage :
 |    
 |    inp_float is variable of type <float>  
 |    any floating point value can be passed for the argument, while the default is 0.0 
 |    the function returns the same arg value as type <float> 
 |     
 |    cmds : 
 |        1. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py 10.0 
 |        2. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py -inp_float=10.0  
 |    
 | -> float (Returnable)

['basic_usage.py', '--help'] : Expected(None) != Actual({})

_______________ ERROR at teardown of test_single_str[arg0-None] _______________

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global args_in
        global OBJ
        global returned
    
        yield
    
>       assert(returned == OBJ.returned)
E       assert None == {}
E        +  where {} = <minimal_scripts.basic_usage.single_str object at 0x000002AA623C2B08>.returned

test_min_call.py:126: AssertionError
---------------------------- Captured stdout call -----------------------------

 | > def parse_args 
 |    
 |  Description :
 |    
 |    example parse_args template function with single argument of type <str>  
 |    
 |  Arguments :
 |    
 |   -inp_str: str = 'None'
 |    
 |  Usage :
 |    
 |    inp_str is variable of type <str>  
 |    any string value can be passed for the argument, while the default is "None" 
 |    the function returns the same arg value as type <str> 
 |     
 |    cmds : 
 |        1. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py Empty 
 |        2. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py -inp_str=Empty  
 |    
 | -> str (Returnable)

['basic_usage.py', '-h'] : Expected(None) != Actual({})

_______________ ERROR at teardown of test_single_str[arg1-None] _______________

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global args_in
        global OBJ
        global returned
    
        yield
    
>       assert(returned == OBJ.returned)
E       assert None == {}
E        +  where {} = <minimal_scripts.basic_usage.single_str object at 0x000002AA623BAC48>.returned

test_min_call.py:126: AssertionError
---------------------------- Captured stdout call -----------------------------

 | > def parse_args 
 |    
 |  Description :
 |    
 |    example parse_args template function with single argument of type <str>  
 |    
 |  Arguments :
 |    
 |   -inp_str: str = 'None'
 |    
 |  Usage :
 |    
 |    inp_str is variable of type <str>  
 |    any string value can be passed for the argument, while the default is "None" 
 |    the function returns the same arg value as type <str> 
 |     
 |    cmds : 
 |        1. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py Empty 
 |        2. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py -inp_str=Empty  
 |    
 | -> str (Returnable)

['basic_usage.py', '--help'] : Expected(None) != Actual({})

______________ ERROR at teardown of test_single_list[arg0-None] _______________

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global args_in
        global OBJ
        global returned
    
        yield
    
>       assert(returned == OBJ.returned)
E       assert None == {}
E        +  where {} = <minimal_scripts.basic_usage.single_list object at 0x000002AA623D2B48>.returned

test_min_call.py:126: AssertionError
---------------------------- Captured stdout call -----------------------------

 | > def parse_args 
 |    
 |  Description :
 |    
 |    example parse_args template function with single argument of type <list>  
 |    
 |  Arguments :
 |    
 |   -inp_list: list = [None]
 |    
 |  Usage :
 |    
 |    inp_list is variable of type <list>  
 |    any list value can be passed for the argument, while the default is [None] 
 |    the function returns the same arg value as type <list> 
 |     
 |    cmds : 
 |        1. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py ["Empty"] 
 |        2. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py -inp_list=["Empty"]  
 |    
 | -> list (Returnable)

['basic_usage.py', '-h'] : Expected(None) != Actual({})

______________ ERROR at teardown of test_single_list[arg1-None] _______________

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global args_in
        global OBJ
        global returned
    
        yield
    
>       assert(returned == OBJ.returned)
E       assert None == {}
E        +  where {} = <minimal_scripts.basic_usage.single_list object at 0x000002AA623D6488>.returned

test_min_call.py:126: AssertionError
---------------------------- Captured stdout call -----------------------------

 | > def parse_args 
 |    
 |  Description :
 |    
 |    example parse_args template function with single argument of type <list>  
 |    
 |  Arguments :
 |    
 |   -inp_list: list = [None]
 |    
 |  Usage :
 |    
 |    inp_list is variable of type <list>  
 |    any list value can be passed for the argument, while the default is [None] 
 |    the function returns the same arg value as type <list> 
 |     
 |    cmds : 
 |        1. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py ["Empty"] 
 |        2. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py -inp_list=["Empty"]  
 |    
 | -> list (Returnable)

['basic_usage.py', '--help'] : Expected(None) != Actual({})

______________ ERROR at teardown of test_single_dict[arg0-None] _______________

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global args_in
        global OBJ
        global returned
    
        yield
    
>       assert(returned == OBJ.returned)
E       assert None == {}
E        +  where {} = <minimal_scripts.basic_usage.single_dict object at 0x000002AA622ED1C8>.returned

test_min_call.py:126: AssertionError
---------------------------- Captured stdout call -----------------------------

 | > def parse_args 
 |    
 |  Description :
 |    
 |    example parse_args template function with single argument of type <dict>  
 |    
 |  Arguments :
 |    
 |   -inp_dict: dict = {None: None}
 |    
 |  Usage :
 |    
 |    inp_dict is variable of type <dict>  
 |    any dict value can be passed for the argument, while the default is {None: None} 
 |    the function returns the same arg value as type <dict> 
 |     
 |    cmds : 
 |        1. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py {"Empty":"Empty"} 
 |        2. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py -inp_dict={"Empty":"Empty"}  
 |    
 | -> dict (Returnable)

['basic_usage.py', '-h'] : Expected(None) != Actual({})

______________ ERROR at teardown of test_single_dict[arg1-None] _______________

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global args_in
        global OBJ
        global returned
    
        yield
    
>       assert(returned == OBJ.returned)
E       assert None == {}
E        +  where {} = <minimal_scripts.basic_usage.single_dict object at 0x000002AA623A8F48>.returned

test_min_call.py:126: AssertionError
---------------------------- Captured stdout call -----------------------------

 | > def parse_args 
 |    
 |  Description :
 |    
 |    example parse_args template function with single argument of type <dict>  
 |    
 |  Arguments :
 |    
 |   -inp_dict: dict = {None: None}
 |    
 |  Usage :
 |    
 |    inp_dict is variable of type <dict>  
 |    any dict value can be passed for the argument, while the default is {None: None} 
 |    the function returns the same arg value as type <dict> 
 |     
 |    cmds : 
 |        1. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py {"Empty":"Empty"} 
 |        2. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py -inp_dict={"Empty":"Empty"}  
 |    
 | -> dict (Returnable)

['basic_usage.py', '--help'] : Expected(None) != Actual({})

______________ ERROR at teardown of test_single_bool[arg0-None] _______________

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global args_in
        global OBJ
        global returned
    
        yield
    
>       assert(returned == OBJ.returned)
E       assert None == {}
E        +  where {} = <minimal_scripts.basic_usage.single_bool object at 0x000002AA623A7208>.returned

test_min_call.py:126: AssertionError
---------------------------- Captured stdout call -----------------------------

 | > def parse_args 
 |    
 |  Description :
 |    
 |    example parse_args template function with single argument of type <bool>  
 |    
 |  Arguments :
 |    
 |   -inp_bool: bool = False
 |    
 |  Usage :
 |    
 |    inp_bool is variable of type <bool>  
 |    any bool value can be passed for the argument, while the default is False 
 |    the function returns the same arg value as type <bool> 
 |     
 |    cmds : 
 |        1. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py True 
 |        2. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py -inp_bool=True  
 |    
 | -> bool (Returnable)

['basic_usage.py', '-h'] : Expected(None) != Actual({})

______________ ERROR at teardown of test_single_bool[arg1-None] _______________

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global args_in
        global OBJ
        global returned
    
        yield
    
>       assert(returned == OBJ.returned)
E       assert None == {}
E        +  where {} = <minimal_scripts.basic_usage.single_bool object at 0x000002AA623C67C8>.returned

test_min_call.py:126: AssertionError
---------------------------- Captured stdout call -----------------------------

 | > def parse_args 
 |    
 |  Description :
 |    
 |    example parse_args template function with single argument of type <bool>  
 |    
 |  Arguments :
 |    
 |   -inp_bool: bool = False
 |    
 |  Usage :
 |    
 |    inp_bool is variable of type <bool>  
 |    any bool value can be passed for the argument, while the default is False 
 |    the function returns the same arg value as type <bool> 
 |     
 |    cmds : 
 |        1. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py True 
 |        2. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py -inp_bool=True  
 |    
 | -> bool (Returnable)

['basic_usage.py', '--help'] : Expected(None) != Actual({})

_______________ ERROR at teardown of test_multi_args[arg0-None] _______________

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global args_in
        global OBJ
        global returned
    
        yield
    
>       assert(returned == OBJ.returned)
E       assert None == {}
E        +  where {} = <minimal_scripts.basic_usage.multi_args object at 0x000002AA623B2288>.returned

test_min_call.py:126: AssertionError
---------------------------- Captured stdout call -----------------------------

 | > def parse_args 
 |    
 |  Description :
 |    
 |    example parse_args template function with multiple arguments of different types  
 |    
 |  Arguments :
 |    
 |   -inp_int: int = 6
 |   -inp_float: float = 6.0
 |   -inp_str: str = 'Six'
 |   -inp_list: list = [6, 6.0, 'Six']
 |   -inp_dict: dict = {'int': 6, 'float': 6.0, 'str': 'Six'}
 |   -inp_bool: bool = False
 |    
 |  Usage :
 |    
 |    Six arguments of different data type can be passed  
 |    any value of the respective data type can be passed for specific argument. for defaults refer above 
 |    the function returns a dict containing all the arguments and its values. 
 |     
 |    cmds : 
 |        1. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py 10 10.0 Seven [10,10.0,'Seven'] {'int':10,'float':10.0,'str':'Seven'} True 
 |        2. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py -inp_int=10 -inp_float=10.0 -inp_str=Seven -inp_list=[10,10.0,'Seven'] -inp_dict={'int':10,'float':10.0,'str':'Seven'} -inp_bool=True  
 |    
 | -> dict (Returnable)

['basic_usage.py', '-h'] : Expected(None) != Actual({})

_______________ ERROR at teardown of test_multi_args[arg1-None] _______________

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global args_in
        global OBJ
        global returned
    
        yield
    
>       assert(returned == OBJ.returned)
E       assert None == {}
E        +  where {} = <minimal_scripts.basic_usage.multi_args object at 0x000002AA623EB408>.returned

test_min_call.py:126: AssertionError
---------------------------- Captured stdout call -----------------------------

 | > def parse_args 
 |    
 |  Description :
 |    
 |    example parse_args template function with multiple arguments of different types  
 |    
 |  Arguments :
 |    
 |   -inp_int: int = 6
 |   -inp_float: float = 6.0
 |   -inp_str: str = 'Six'
 |   -inp_list: list = [6, 6.0, 'Six']
 |   -inp_dict: dict = {'int': 6, 'float': 6.0, 'str': 'Six'}
 |   -inp_bool: bool = False
 |    
 |  Usage :
 |    
 |    Six arguments of different data type can be passed  
 |    any value of the respective data type can be passed for specific argument. for defaults refer above 
 |    the function returns a dict containing all the arguments and its values. 
 |     
 |    cmds : 
 |        1. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py 10 10.0 Seven [10,10.0,'Seven'] {'int':10,'float':10.0,'str':'Seven'} True 
 |        2. python D:\Softwares\miniconda3\envs\py4cli\lib\site-packages\pytest\__main__.py -inp_int=10 -inp_float=10.0 -inp_str=Seven -inp_list=[10,10.0,'Seven'] -inp_dict={'int':10,'float':10.0,'str':'Seven'} -inp_bool=True  
 |    
 | -> dict (Returnable)

['basic_usage.py', '--help'] : Expected(None) != Actual({})

------ generated report: D:\GitRepos\py4cli\REPORTS\TestCaseResults.html ------
=========================== short test summary info ===========================
ERROR test_min_call.py::test_single_int[arg0-None] - assert None == {}
ERROR test_min_call.py::test_single_int[arg1-None] - assert None == {}
ERROR test_min_call.py::test_single_float[arg0-None] - assert None == {}
ERROR test_min_call.py::test_single_float[arg1-None] - assert None == {}
ERROR test_min_call.py::test_single_str[arg0-None] - assert None == {}
ERROR test_min_call.py::test_single_str[arg1-None] - assert None == {}
ERROR test_min_call.py::test_single_list[arg0-None] - assert None == {}
ERROR test_min_call.py::test_single_list[arg1-None] - assert None == {}
ERROR test_min_call.py::test_single_dict[arg0-None] - assert None == {}
ERROR test_min_call.py::test_single_dict[arg1-None] - assert None == {}
ERROR test_min_call.py::test_single_bool[arg0-None] - assert None == {}
ERROR test_min_call.py::test_single_bool[arg1-None] - assert None == {}
ERROR test_min_call.py::test_multi_args[arg0-None] - assert None == {}
ERROR test_min_call.py::test_multi_args[arg1-None] - assert None == {}
======================= 127 passed, 14 errors in 31.65s =======================
