============================= test session starts =============================
platform win32 -- Python 3.7.16, pytest-6.2.5, py-1.11.0, pluggy-1.2.0
rootdir: D:\GitRepos\py4cli
plugins: reporter-0.5.2, reporter-html1-0.8.2
collected 86 items

test_basic_call.py ...........................................           [ 50%]
test_basic_os.py ........E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E [ 86%]
.E.E.E.E........                                                         [100%]

=================================== ERRORS ====================================
_ ERROR at teardown of test_os_calls[python scripts/multi_args.py -h-single_8.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...le)\n\nNone\n" == "['scripts/mu...turnable)\n\n"
E             - ['scripts/multi_args.py', '-h']
E             + ['scripts/use_int.py', '--help']
E               
E                | > def parse_args 
E                |    
E                |  Description :
E                |    ...
E             
E             ...Full output truncated (40 lines hidden), use '-vv' to show

test_basic_os.py:78: AssertionError
---------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "scripts/multi_args.py", line 9, in <module>
    obj.returned['inp_set'] = set(obj.returned['inp_set'])
TypeError: 'NoneType' object is not subscriptable
_ ERROR at teardown of test_os_calls[python scripts/use_int.py --help-single_9.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...le)\n\nNone\n" == "['scripts/us...le)\n\nNone\n"
E             - ['scripts/use_int.py', '--help']
E             ?               ^^
E             + ['scripts/use_float.py', '--help']
E             ?               ^^^^
E               
E                | > def parse_args 
E                |    ...
E             
E             ...Full output truncated (43 lines hidden), use '-vv' to show

test_basic_os.py:78: AssertionError
_ ERROR at teardown of test_os_calls[python scripts/use_float.py --help-single_10.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...le)\n\nNone\n" == "['scripts/us...le)\n\nNone\n"
E             - ['scripts/use_float.py', '--help']
E             ?               ^^^^
E             + ['scripts/use_str.py', '--help']
E             ?               ^ +
E               
E                | > def parse_args 
E                |    ...
E             
E             ...Full output truncated (44 lines hidden), use '-vv' to show

test_basic_os.py:78: AssertionError
_ ERROR at teardown of test_os_calls[python scripts/use_str.py --help-single_11.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...le)\n\nNone\n" == "['scripts/us...le)\n\nNone\n"
E             - ['scripts/use_str.py', '--help']
E             ?                 -
E             + ['scripts/use_list.py', '--help']
E             ?               ++
E               
E                | > def parse_args 
E                |    ...
E             
E             ...Full output truncated (45 lines hidden), use '-vv' to show

test_basic_os.py:78: AssertionError
_ ERROR at teardown of test_os_calls[python scripts/use_list.py --help-single_12.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...le)\n\nNone\n" == "['scripts/us...le)\n\nNone\n"
E             - ['scripts/use_list.py', '--help']
E             ?                ^^^
E             + ['scripts/use_tuple.py', '--help']
E             ?               +++ ^
E               
E                | > def parse_args 
E                |    ...
E             
E             ...Full output truncated (44 lines hidden), use '-vv' to show

test_basic_os.py:78: AssertionError
_ ERROR at teardown of test_os_calls[python scripts/use_tuple.py --help-single_13.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...le)\n\nNone\n" == "['scripts/us...le)\n\nNone\n"
E             - ['scripts/use_tuple.py', '--help']
E             ?                ----
E             + ['scripts/use_set.py', '--help']
E             ?               ++
E               
E                | > def parse_args 
E                |    ...
E             
E             ...Full output truncated (44 lines hidden), use '-vv' to show

test_basic_os.py:78: AssertionError
_ ERROR at teardown of test_os_calls[python scripts/use_set.py --help-single_14.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...le)\n\nNone\n" == "['scripts/us...le)\n\nNone\n"
E             - ['scripts/use_set.py', '--help']
E             ?               ^^
E             + ['scripts/use_dict.py', '--help']
E             ?               ^^^
E               
E                | > def parse_args 
E                |    ...
E             
E             ...Full output truncated (44 lines hidden), use '-vv' to show

test_basic_os.py:78: AssertionError
_ ERROR at teardown of test_os_calls[python scripts/use_dict.py --help-single_15.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...t.py']\n\n0\n" == "['scripts/us...le)\n\nNone\n"
E             - ['scripts/use_dict.py', '--help']
E             ?               - ^     ----------
E             + ['scripts/use_int.py']
E             ?                ^
E               
E             + 0
E             -  | > def parse_args ...
E             
E             ...Full output truncated (23 lines hidden), use '-vv' to show

test_basic_os.py:78: AssertionError
_ ERROR at teardown of test_os_calls[python scripts/multi_args.py --help-single_16.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...py']\n\n0.0\n" == "['scripts/mu...turnable)\n\n"
E             - ['scripts/multi_args.py', '--help']
E             + ['scripts/use_float.py']
E               
E             + 0.0
E             -  | > def parse_args 
E             -  |    
E             -  |  Description :...
E             
E             ...Full output truncated (26 lines hidden), use '-vv' to show

test_basic_os.py:78: AssertionError
---------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "scripts/multi_args.py", line 9, in <module>
    obj.returned['inp_set'] = set(obj.returned['inp_set'])
TypeError: 'NoneType' object is not subscriptable
_ ERROR at teardown of test_os_calls[python scripts/use_int.py-single_17.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...y']\n\nNone\n" == "['scripts/us...t.py']\n\n0\n"
E             - ['scripts/use_int.py']
E             ?               ^^
E             + ['scripts/use_str.py']
E             ?               ^ +
E               
E             - 0
E             + None

test_basic_os.py:78: AssertionError
_ ERROR at teardown of test_os_calls[python scripts/use_float.py-single_18.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...]\n\n[None]\n" == "['scripts/us...py']\n\n0.0\n"
E             - ['scripts/use_float.py']
E             ?               - ^^
E             + ['scripts/use_list.py']
E             ?                ^^
E               
E             - 0.0
E             + [None]

test_basic_os.py:78: AssertionError
_ ERROR at teardown of test_os_calls[python scripts/use_str.py-single_19.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...\n\n(None,)\n" == "['scripts/us...y']\n\nNone\n"
E             - ['scripts/use_str.py']
E             ?               - ^
E             + ['scripts/use_tuple.py']
E             ?                ^^^^
E               
E             - None
E             + (None,)...
E             
E             ...Full output truncated (2 lines hidden), use '-vv' to show

test_basic_os.py:78: AssertionError
_ ERROR at teardown of test_os_calls[python scripts/use_list.py-single_20.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...]\n\n{None}\n" == "['scripts/us...]\n\n[None]\n"
E             - ['scripts/use_list.py']
E             ?               --
E             + ['scripts/use_set.py']
E             ?                +
E               
E             - [None]
E             + {None}

test_basic_os.py:78: AssertionError
_ ERROR at teardown of test_os_calls[python scripts/use_tuple.py-single_21.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...None: None}\n" == "['scripts/us...\n\n(None,)\n"
E             - ['scripts/use_tuple.py']
E             ?                ----
E             + ['scripts/use_dict.py']
E             ?               +++
E               
E             - (None,)
E             + {None: None}

test_basic_os.py:78: AssertionError
_ ERROR at teardown of test_os_calls[python scripts/use_set.py-single_22.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...'10']\n\n10\n" == "['scripts/us...]\n\n{None}\n"
E             - ['scripts/use_set.py']
E             ?               ^^
E             + ['scripts/use_int.py', '10']
E             ?               ^^     ++++++
E               
E             - {None}
E             + 10

test_basic_os.py:78: AssertionError
_ ERROR at teardown of test_os_calls[python scripts/use_dict.py-single_23.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...0']\n\n10.0\n" == "['scripts/us...None: None}\n"
E             - ['scripts/use_dict.py']
E             + ['scripts/use_float.py', '10.0']
E               
E             - {None: None}
E             + 10.0

test_basic_os.py:78: AssertionError
_ ERROR at teardown of test_os_calls[python scripts/multi_args.py-single_24.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...']\n\nhello\n" == "['scripts/mu...args.py']\n\n"
E             - ['scripts/multi_args.py']
E             + ['scripts/use_str.py', 'hello']
E               
E             + hello

test_basic_os.py:78: AssertionError
---------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "scripts/multi_args.py", line 10, in <module>
    print(json.dumps(obj.returned, indent=2, sort_keys=True))
  File "D:\Softwares\miniconda3\envs\py4cli\lib\json\__init__.py", line 238, in dumps
    **kw).encode(obj)
  File "D:\Softwares\miniconda3\envs\py4cli\lib\json\encoder.py", line 201, in encode
    chunks = list(chunks)
  File "D:\Softwares\miniconda3\envs\py4cli\lib\json\encoder.py", line 431, in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
  File "D:\Softwares\miniconda3\envs\py4cli\lib\json\encoder.py", line 405, in _iterencode_dict
    yield from chunks
  File "D:\Softwares\miniconda3\envs\py4cli\lib\json\encoder.py", line 438, in _iterencode
    o = _default(o)
  File "D:\Softwares\miniconda3\envs\py4cli\lib\json\encoder.py", line 179, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type set is not JSON serializable
_ ERROR at teardown of test_os_calls[python scripts/use_int.py 10-single_25.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...\n[1, 2, 3]\n" == "['scripts/us...'10']\n\n10\n"
E             - ['scripts/use_int.py', '10']
E             ?                ^         ^
E             + ['scripts/use_list.py', '[1,2,3]']
E             ?               + ^        + ^^^^^
E               
E             - 10
E             + [1, 2, 3]

test_basic_os.py:78: AssertionError
_ ERROR at teardown of test_os_calls[python scripts/use_float.py 10.0-single_26.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...\n(1, 2, 3)\n" == "['scripts/us...0']\n\n10.0\n"
E             - ['scripts/use_float.py', '10.0']
E             ?               ^ ^^^        ^^^
E             + ['scripts/use_tuple.py', '(1,2,3)']
E             ?               ^^^ ^       + ^^^^^
E               
E             - 10.0
E             + (1, 2, 3)

test_basic_os.py:78: AssertionError
_ ERROR at teardown of test_os_calls[python scripts/use_str.py hello-single_27.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...\n{1, 2, 3}\n" == "['scripts/us...']\n\nhello\n"
E             - ['scripts/use_str.py', 'hello']
E             + ['scripts/use_set.py', '{1,2,3,1,2,3}']
E               
E             - hello
E             + {1, 2, 3}

test_basic_os.py:78: AssertionError
_ ERROR at teardown of test_os_calls[python scripts/use_list.py [1,2,3]-single_28.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...': 'world'}\n" == "['scripts/us...\n[1, 2, 3]\n"
E             - ['scripts/use_list.py', '[1,2,3]']
E             + ['scripts/use_dict.py', "{'hello':'world'}"]
E               
E             - [1, 2, 3]
E             + {'hello': 'world'}

test_basic_os.py:78: AssertionError
_ ERROR at teardown of test_os_calls[python scripts/use_tuple.py (1,2,3)-single_29.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...=10']\n\n10\n" == "['scripts/us...\n(1, 2, 3)\n"
E             - ['scripts/use_tuple.py', '(1,2,3)']
E             + ['scripts/use_int.py', '-inp_int=10']
E               
E             - (1, 2, 3)
E             + 10

test_basic_os.py:78: AssertionError
_ ERROR at teardown of test_os_calls[python scripts/use_set.py {1,2,3,1,2,3}-single_30.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...0']\n\n10.0\n" == "['scripts/us...\n{1, 2, 3}\n"
E             - ['scripts/use_set.py', '{1,2,3,1,2,3}']
E             + ['scripts/use_float.py', '-inp_float=10.0']
E               
E             - {1, 2, 3}
E             + 10.0

test_basic_os.py:78: AssertionError
_ ERROR at teardown of test_os_calls[python scripts/use_dict.py {'hello':'world'}-single_31.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...']\n\nhello\n" == "['scripts/us...': 'world'}\n"
E             - ['scripts/use_dict.py', "{'hello':'world'}"]
E             + ['scripts/use_str.py', '-inp_str=hello']
E               
E             - {'hello': 'world'}
E             + hello

test_basic_os.py:78: AssertionError
_ ERROR at teardown of test_os_calls[python scripts/multi_args.py 10 10.0 Seven [10,10.0,'Seven'] (10,10.0,'Seven') {10,10.0,'Seven'} {'int':10,'float':10.0,'str':'Seven'}-single_32.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...\n[1, 2, 3]\n" == '[\'scripts/m...even\'}"]\n\n'
E             - ['scripts/multi_args.py', '10', '10.0', 'Seven', "[10,10.0,'Seven']", "(10,10.0,'Seven')", "{10,10.0,'Seven'}", "{'int':10,'float':10.0,'str':'Seven'}"]
E             + ['scripts/use_list.py', '-inp_list=[1,2,3]']
E               
E             + [1, 2, 3]

test_basic_os.py:78: AssertionError
---------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "scripts/multi_args.py", line 10, in <module>
    print(json.dumps(obj.returned, indent=2, sort_keys=True))
  File "D:\Softwares\miniconda3\envs\py4cli\lib\json\__init__.py", line 238, in dumps
    **kw).encode(obj)
  File "D:\Softwares\miniconda3\envs\py4cli\lib\json\encoder.py", line 201, in encode
    chunks = list(chunks)
  File "D:\Softwares\miniconda3\envs\py4cli\lib\json\encoder.py", line 431, in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
  File "D:\Softwares\miniconda3\envs\py4cli\lib\json\encoder.py", line 405, in _iterencode_dict
    yield from chunks
  File "D:\Softwares\miniconda3\envs\py4cli\lib\json\encoder.py", line 438, in _iterencode
    o = _default(o)
  File "D:\Softwares\miniconda3\envs\py4cli\lib\json\encoder.py", line 179, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type set is not JSON serializable
_ ERROR at teardown of test_os_calls[python scripts/use_int.py -inp_int=10-single_33.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...\n(1, 2, 3)\n" == "['scripts/us...=10']\n\n10\n"
E             - ['scripts/use_int.py', '-inp_int=10']
E             ?               --             --   ^
E             + ['scripts/use_tuple.py', '-inp_tuple=(1,2,3)']
E             ?                ++++             ++++ + ^^^^^
E               
E             - 10
E             + (1, 2, 3)

test_basic_os.py:78: AssertionError
_ ERROR at teardown of test_os_calls[python scripts/use_float.py -inp_float=10.0-single_34.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...\n{1, 2, 3}\n" == "['scripts/us...0']\n\n10.0\n"
E             - ['scripts/use_float.py', '-inp_float=10.0']
E             + ['scripts/use_set.py', '-inp_set={1,2,3,1,2,3}']
E               
E             - 10.0
E             + {1, 2, 3}

test_basic_os.py:78: AssertionError
_ ERROR at teardown of test_os_calls[python scripts/use_str.py -inp_str=hello-single_35.log] _

    @pytest.fixture(autouse = True, scope="function")
    def fix_function():
    
        global cmd
        global file
    
        yield
    
        if os.path.exists(f'ref_files/{file}'):
            f1 = open(f'ref_files/{file}', 'r')
            Ref_String = f1.read()
            f1.close()
    
            f2 = open(f'res_files/{file}', 'r')
            Act_String = f2.read()
            f2.close()
>           assert(Ref_String == Act_String)
E           assert "['scripts/us...': 'world'}\n" == "['scripts/us...']\n\nhello\n"
E             - ['scripts/use_str.py', '-inp_str=hello']
E             ?               ^ -      ^     ^ -
E             + ['scripts/use_dict.py', "-inp_dict={'hello':'world'}"]
E             ?               ^^^       ^     ^^^  ++      ++++++++++
E               
E             - hello
E             + {'hello': 'world'}

test_basic_os.py:78: AssertionError
------ generated report: D:\GitRepos\py4cli\REPORTS\TestCaseResults.html ------
=========================== short test summary info ===========================
ERROR test_basic_os.py::test_os_calls[python scripts\multi_args.py -h-single_8.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_int.py --help-single_9.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_float.py --help-single_10.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_str.py --help-single_11.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_list.py --help-single_12.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_tuple.py --help-single_13.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_set.py --help-single_14.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_dict.py --help-single_15.log]
ERROR test_basic_os.py::test_os_calls[python scripts\multi_args.py --help-single_16.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_int.py-single_17.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_float.py-single_18.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_str.py-single_19.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_list.py-single_20.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_tuple.py-single_21.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_set.py-single_22.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_dict.py-single_23.log]
ERROR test_basic_os.py::test_os_calls[python scripts\multi_args.py-single_24.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_int.py 10-single_25.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_float.py 10.0-single_26.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_str.py hello-single_27.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_list.py [1,2,3]-single_28.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_tuple.py (1,2,3)-single_29.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_set.py {1,2,3,1,2,3}-single_30.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_dict.py {'hello':'world'}-single_31.log]
ERROR test_basic_os.py::test_os_calls[python scripts\multi_args.py 10 10.0 Seven [10,10.0,'Seven'] (10,10.0,'Seven') {10,10.0,'Seven'} {'int':10,'float':10.0,'str':'Seven'}-single_32.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_int.py -inp_int=10-single_33.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_float.py -inp_float=10.0-single_34.log]
ERROR test_basic_os.py::test_os_calls[python scripts\use_str.py -inp_str=hello-single_35.log]
======================= 86 passed, 28 errors in 12.21s ========================
